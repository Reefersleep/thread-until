<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="381b7e0c-3a2c-4c72-a6e1-624eac59405e" name="Default Changelist" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ProjectId" id="1hyTYmI6Aum1URc1g3zhgGlsQSn" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showExcludedFiles" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
  </component>
  <component name="ReplState" timestamp="1601579549977">{:repl-history {:ide [], :local [{:command &quot;*e&quot;, :offset 2, :ns &quot;thread-until.core&quot;} {:command &quot;(concat '(1 2) [3 4])&quot;, :offset 19, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot; 1 2 3 4]))&quot;, :offset 93, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot; 1 2 3 4])\n         (update :nephews conj \&quot;ryp\&quot;))&quot;, :offset 129, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(&gt;= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot; 1 2 3 4])\n         (update :nephews conj \&quot;ryp\&quot;))&quot;, :offset 18, :ns &quot;thread-until.core&quot;} {:command &quot;(concat [1 2] [3 4])&quot;, :offset 18, :ns &quot;thread-until.core&quot;} {:command &quot;(conj (concat [1 2] [3 4]) \&quot;ryp\&quot;)&quot;, :offset 31, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         (update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 9, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt; (assoc :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n    (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n    (update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 3, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt; (assoc nil :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n    (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n    (update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 14, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt; (assoc nil :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n    (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n    (update :nephews conj \&quot;ryp\&quot;))&quot;, :offset 134, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :hey (assoc nil :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n    (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n    (update :nephews conj \&quot;ryp\&quot;))&quot;, :offset 13, :ns &quot;thread-until.core&quot;} {:command &quot;(eval ':hej)&quot;, :offset 11, :ns &quot;thread-until.core&quot;} {:command &quot;((eval ':hej) (eval '(assoc nil :nephews [\&quot;rip\&quot;])))&quot;, :offset 49, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :hey (assoc nil :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n         )&quot;, :offset 85, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :hey (assoc nil :nephews [\&quot;rip\&quot;])\n    (update :nephews conj \&quot;rap\&quot;)\n    (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         )&quot;, :offset 128, :ns &quot;thread-until.core&quot;} {:command &quot;(defmacro -&gt;until2 [predicate-fn x &amp; forms]\n  `(let [result# ~x\n         realized-predicate# ~predicate-fn]\n     (if (realized-predicate# result#)\n       result#\n       (if forms\n         (let [form# (first forms)\n               threaded# (if (seq? form#)\n                           (-&gt; result# ~form#)\n                           (~form result#))]\n           (-&gt;until2 ~predicate-fn ~threaded ~@(next forms)))\n         result#))))&quot;, :offset 430, :ns &quot;thread-until.core&quot;} {:command &quot;(defmacro -&gt;until2 [predicate-fn x &amp; forms]\n  `(let [result# ~x\n         realized-predicate# ~predicate-fn]\n     (if (realized-predicate# result#)\n       result#\n       (if forms\n         (let [form# (first forms)\n               _# (prn form#)\n               threaded# (if (seq? form#)\n                           (-&gt; result# ~form#)\n                           (~form# result#))]\n           (-&gt;until2 ~predicate-fn ~threaded# ~@(next forms)))\n         result#))))&quot;, :offset 242, :ns &quot;thread-until.core&quot;} {:command &quot;(defmacro -&gt;until2 [predicate-fn x &amp; forms]\n  `(let [result# ~x\n         realized-predicate# ~predicate-fn]\n     (if (realized-predicate# result#)\n       result#\n       (if forms\n         (let [form# (first forms)\n               threaded# (if (seq? form#)\n                           (-&gt; result# ~form#)\n                           (~form# result#))]\n           (-&gt;until2 ~predicate-fn ~threaded# ~@(next forms)))\n         result#))))&quot;, :offset 324, :ns &quot;thread-until.core&quot;} {:command &quot;(defmacro -&gt;until2 [predicate-fn x &amp; forms]\n  `(let [result# ~x\n         realized-predicate# ~predicate-fn]\n     (if (realized-predicate# result#)\n       result#\n       (if forms\n         (let [form# (first forms)\n               threaded# (if (seq? form#)\n                           (-&gt; result# ~form#)\n                           #_(~form# result#))]\n           (-&gt;until2 ~predicate-fn ~threaded# ~@(next forms)))\n         result#))))&quot;, :offset 332, :ns &quot;thread-until.core&quot;} {:command &quot;(defmacro -&gt;until2 [predicate-fn x &amp; forms]\n  `(let [result# ~x\n         realized-predicate# ~predicate-fn]\n     (if (realized-predicate# result#)\n       result#\n       (if forms\n         (let [form# (first forms)\n               threaded# (if (seq? ~form#)\n                           (-&gt; result# ~form#)\n                           #_(~form# result#))]\n           (-&gt;until2 ~predicate-fn ~threaded# ~@(next forms)))\n         result#))))&quot;, :offset 250, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until2 :hey (assoc nil :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n\n                        ))&quot;, :offset 25, :ns &quot;thread-until.core&quot;} {:command &quot;update :nephews conj \&quot;rap\&quot;)&quot;, :offset 27, :ns &quot;thread-until.core&quot;} {:command &quot;(update :nephews conj \&quot;rap\&quot;)&quot;, :offset 1, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until :hey (assoc nil :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n\n                        ))&quot;, :offset 139, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :hey (assoc nil :nephews [\&quot;rip\&quot;])\n          (update :nephews conj \&quot;rap\&quot;)\n\n          )&quot;, :offset 0, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until2 :hey (assoc nil :nephews [\&quot;rip\&quot;])\n          (update :nephews conj \&quot;rap\&quot;)\n         (update :hey :ho)\n         (update :nephews conj \&quot;rup\&quot;)\n\n          )&quot;, :offset 53, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until2 :hey (assoc nil :nephews [\&quot;rip\&quot;])\n                         (update :nephews conj \&quot;rap\&quot;)\n                         (update :hey :ho)\n                         (update :nephews conj \&quot;rup\&quot;)\n\n                         ))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;hahahah\&quot;)\n         #_(update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 163, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;hahahah\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 175, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(&gt;= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;hahahah\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 18, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(&gt;= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 134, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until (comp #(&gt;= % 3) count :nephews)\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n                        #_(update :nephews cons \&quot;ryp\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until (comp #(&gt;= % 3) count :nephews)\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n                        #_(update :nephews cons \&quot;ryp\&quot;)))&quot;, :offset 12, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until :name {}\n                        (assoc :animal :dog)\n                        (assoc :race \&quot;Poodle\&quot;)\n                        (assoc :name \&quot;Mr. Teensy\&quot;)\n                        (assoc :color \&quot;white\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         (assoc :animal :dog)\n         #_(assoc :race \&quot;Poodle\&quot;)\n         #_(assoc :name \&quot;Mr. Teensy\&quot;)\n         (#_assoc :color \&quot;white\&quot;))&quot;, :offset 132, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         #_(assoc :animal :dog)\n         #_(assoc :race \&quot;Poodle\&quot;)\n         #_(assoc :name \&quot;Mr. Teensy\&quot;)\n         #_(assoc :color \&quot;white\&quot;))&quot;, :offset 149, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         (assoc :animal :dog)\n         #_(assoc :race \&quot;Poodle\&quot;)\n         #_(assoc :name \&quot;Mr. Teensy\&quot;)\n         #_(assoc :color \&quot;white\&quot;))&quot;, :offset 27, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         (assoc :animal :dog)\n         (assoc :race \&quot;Poodle\&quot;)\n         #_(assoc :name \&quot;Mr. Teensy\&quot;)\n         #_(assoc :color \&quot;white\&quot;))&quot;, :offset 57, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         (assoc :animal :dog)\n         (assoc :race \&quot;Poodle\&quot;)\n         (assoc :name \&quot;Mr. Teensy\&quot;)\n         #_(assoc :color \&quot;white\&quot;))&quot;, :offset 89, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until :name {}\n         (assoc :animal :dog)\n         (assoc :race \&quot;Poodle\&quot;)\n         (assoc :name \&quot;Mr. Teensy\&quot;)\n         (assoc :color \&quot;white\&quot;))&quot;, :offset 125, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         (update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 210, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         (update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 135, :ns &quot;thread-until.core&quot;} {:command &quot;(update {:nephews [\&quot;rip\&quot; \&quot;rap\&quot;]} :nephews cons \&quot;ryp\&quot;)&quot;, :offset 51, :ns &quot;thread-until.core&quot;} {:command &quot;(update {:nephews [\&quot;rip\&quot; \&quot;rap\&quot;]} :nephews concat [1 2])&quot;, :offset 53, :ns &quot;thread-until.core&quot;} {:command &quot;(update (update {:nephews [\&quot;rip\&quot; \&quot;rap\&quot;]} :nephews concat [1 2]) :nephews cons \&quot;ryp\&quot;)&quot;, :offset 82, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 133, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (comp #(= % 3) count :nephews)\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n         #_(update :nephews cons \&quot;ryp\&quot;))&quot;, :offset 11} {:command &quot;(macroexpand-1 '(-&gt;until (comp #(= % 3) count :nephews)\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n                        #_(update :nephews cons \&quot;ryp\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until (comp #(= % 3) count :nephews)\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n                        #_(update :nephews cons \&quot;ryp\&quot;)))&quot;, :offset 12, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until (comp #(= % 3) count :nephews)\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews concat [\&quot;rup\&quot; \&quot;rop\&quot;])\n                        (update :nephews cons \&quot;ryp\&quot;)))&quot;, :offset 202, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         #_(assoc :nephews [\&quot;rip\&quot;])\n         #_(update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 126, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         #_(update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 124, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         #(update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 159, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 158, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 196, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n           (-&gt; x\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;rup\&quot;)\n         (update :nephews conj \&quot;rop\&quot;))&quot;, :offset 234, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [x]\n            (-&gt; x\n                :nephews\n                count\n                (&gt;= 2)))\n          {}\n          (assoc :nephews [\&quot;rip\&quot;])\n          (update :nephews conj \&quot;rap\&quot;)\n          (update :nephews conj \&quot;rup\&quot;)\n          (update :nephews conj \&quot;rop\&quot;))&quot;, :offset 0, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until (fn [x]\n                          (-&gt; x\n                              :nephews\n                              count\n                              (&gt;= 2)))\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews conj \&quot;rup\&quot;)\n                        (update :nephews conj \&quot;rop\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(cond-&gt; x\n        (not (predicate-fn x)))&quot;, :offset 0} {:command &quot;(macroexpand-1 '(-&gt;\n                 {}\n                 (assoc :nephews [\&quot;rip\&quot;])\n                 (update :nephews conj \&quot;rap\&quot;)\n                 (update :nephews conj \&quot;rup\&quot;)\n                 (update :nephews conj \&quot;rop\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(let [ifs (atom 0)\n      (clojure.walk/postwalk (fn [form]\n                               (when (= 'if form)\n                                 (swap! ifs inc))\n                               form)\n                             (macroexpand-1 '(-&gt;until (fn [y]\n                                                        (-&gt; y\n                                                            :nephews\n                                                            count\n                                                            (&gt;= 2)))\n                                                      {}\n                                                      (assoc :nephews [\&quot;rip\&quot;])\n                                                      (update :nephews conj \&quot;rap\&quot;)\n                                                      (update :nephews conj \&quot;rup\&quot;)\n                                                      (update :nephews conj \&quot;rop\&quot;))))]\n  @ifs)&quot;, :offset 919, :ns &quot;thread-until.core&quot;} {:command &quot;(let [ifs (atom 0)\n      structure (macroexpand-1 '(-&gt;until (fn [y]\n                                           (-&gt; y\n                                               :nephews\n                                               count\n                                               (&gt;= 2)))\n                                         {}\n                                         (assoc :nephews [\&quot;rip\&quot;])\n                                         (update :nephews conj \&quot;rap\&quot;)\n                                         (update :nephews conj \&quot;rup\&quot;)\n                                         (update :nephews conj \&quot;rop\&quot;)))\n      (clojure.walk/postwalk (fn [form]\n                               (when (= 'if form)\n                                 (swap! ifs inc))\n                               form)\n                             structure)]\n  @ifs)&quot;, :offset 819, :ns &quot;thread-until.core&quot;} {:command &quot;(let [ifs (atom 0)\n      structure (macroexpand-1 '(-&gt;until (fn [y]\n                                           (-&gt; y\n                                               :nephews\n                                               count\n                                               (&gt;= 2)))\n                                         {}\n                                         (assoc :nephews [\&quot;rip\&quot;])\n                                         (update :nephews conj \&quot;rap\&quot;)\n                                         (update :nephews conj \&quot;rup\&quot;)\n                                         (update :nephews conj \&quot;rop\&quot;)))]\n  (clojure.walk/postwalk (fn [form]\n                           (when (= 'if form)\n                             (swap! ifs inc))\n                           form)\n                         structure)\n  @ifs)&quot;, :offset 603, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until (fn [y]\n                           (-&gt; y\n                               :nephews\n                               count\n                               (&gt;= 2)))\n                         {}\n                         (assoc :nephews [\&quot;rip\&quot;])\n                         (update :nephews conj \&quot;rap\&quot;)\n                         (update :nephews conj \&quot;rup\&quot;)\n                         (update :nephews conj \&quot;rop\&quot;)))&quot;, :offset 0, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [y]\n           (-&gt; y\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         #_(assoc :nephews [\&quot;rip\&quot;])\n         #_(update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 126, :ns &quot;thread-until.core&quot;} {:command &quot;cond-&gt;&quot;, :offset 6} {:command &quot;(quote form)&quot;, :offset 11, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [y]\n           (-&gt; y\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         #_(update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 269, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [y]\n           (-&gt; y\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         #_(update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 158, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [y]\n           (-&gt; y\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;rup\&quot;)\n         #_(update :nephews conj \&quot;rop\&quot;))&quot;, :offset 196, :ns &quot;thread-until.core&quot;} {:command &quot;(-&gt;until (fn [y]\n           (-&gt; y\n               :nephews\n               count\n               (&gt;= 2)))\n         {}\n         (assoc :nephews [\&quot;rip\&quot;])\n         (update :nephews conj \&quot;rap\&quot;)\n         (update :nephews conj \&quot;rup\&quot;)\n         (update :nephews conj \&quot;rop\&quot;))&quot;, :offset 234, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand-1 '(-&gt;until (fn [y]\n                          (-&gt; y\n                              :nephews\n                              count\n                              (&gt;= 2)))\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews conj \&quot;rup\&quot;)\n                        (update :nephews conj \&quot;rop\&quot;)))&quot;, :offset 16, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until (fn [y]\n                          (-&gt; y\n                              :nephews\n                              count\n                              (&gt;= 2)))\n                        {}\n                        (assoc :nephews [\&quot;rip\&quot;])\n                        (update :nephews conj \&quot;rap\&quot;)\n                        (update :nephews conj \&quot;rup\&quot;)\n                        (update :nephews conj \&quot;rop\&quot;)))&quot;, :offset 12, :ns &quot;thread-until.core&quot;} {:command &quot;(let [conj inc]\n  (-&gt;until :something\n           {:num 0}\n           (update :num conj)\n           (assoc :something true)\n           (update :num conj)))&quot;, :offset 10, :ns &quot;thread-until.core&quot;} {:command &quot;(let [conj inc]\n  (-&gt;\n           {:num 0}\n           (update :num conj)\n           (assoc :something true)\n           (update :num conj)))&quot;, :offset 21, :ns &quot;thread-until.core&quot;} {:command &quot;(let [shadowed inc]\n  (-&gt;until :something\n           {:num 0}\n           (update :num shadowed)\n           (assoc :something true)\n           (update :num shadowed)))&quot;, :offset 163, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until :something\n                       {:num 1}\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)))&quot;, :offset 199, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until :something\n                       {:num 1}\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       ))&quot;, :offset 331, :ns &quot;thread-until.core&quot;} {:command &quot;(macroexpand '(-&gt;until :something\n                       {:num 1}\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       (update :num my-fn)\n                       (assoc :something true)\n                       (update :num my-fn)\n                       ))&quot;, :offset 597, :ns &quot;thread-until.core&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="thread-until" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="thread-until" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="381b7e0c-3a2c-4c72-a6e1-624eac59405e" name="Default Changelist" comment="" />
      <created>1600982381298</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1600982381298</updated>
    </task>
    <servers />
  </component>
  <component name="WindowStateProjectService">
    <state x="184" y="125" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1600982554557">
      <screen x="0" y="23" width="1440" height="877" />
    </state>
    <state x="184" y="125" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.23.1440.877@0.23.1440.877" timestamp="1600982554557" />
    <state x="144" y="100" key="DiffContextDialog" timestamp="1601226399289">
      <screen x="0" y="23" width="1440" height="877" />
    </state>
    <state x="144" y="100" key="DiffContextDialog/0.23.1440.877@0.23.1440.877" timestamp="1601226399289" />
    <state width="600" height="424" key="javadoc.popup" timestamp="1601144726296">
      <screen x="0" y="23" width="1440" height="877" />
    </state>
    <state width="600" height="424" key="javadoc.popup/0.23.1440.877@0.23.1440.877" timestamp="1601144726296" />
    <state x="343" y="213" width="754" height="676" key="search.everywhere.popup" timestamp="1601066448337">
      <screen x="0" y="23" width="1440" height="877" />
    </state>
    <state x="343" y="213" width="754" height="676" key="search.everywhere.popup/0.23.1440.877@0.23.1440.877" timestamp="1601066448337" />
  </component>
</project>